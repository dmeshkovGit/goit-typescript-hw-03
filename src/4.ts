// –£ —Ü—å–æ–º—É –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∞–º –Ω–∞–ª–µ–∂–∏—Ç—å —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å—Ü–µ–Ω–∞—Ä—ñ–π –∂–∏—Ç—Ç—è, –¥–µ –ª—é–¥–∏–Ω–∞, –∫–ª—é—á —ñ –±—É–¥–∏–Ω–æ–∫ –≤–∑–∞—î–º–æ–¥—ñ—é—Ç—å –æ–¥–∏–Ω –∑ –æ–¥–Ω–∏–º.

// –ö–ª—é—á (Key): –°—Ç–≤–æ—Ä—ñ—Ç—å –∫–ª–∞—Å Key. –£ –Ω—å–æ–≥–æ –º–∞—î –±—É—Ç–∏ –æ–¥–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∞ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å signature, —è–∫–∞ –≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è –≤–∏–ø–∞–¥–∫–æ–≤–æ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –æ–±'—î–∫—Ç–∞ —Ü—å–æ–≥–æ –∫–ª–∞—Å—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ Math.random()). –¢–∞–∫–æ–∂ —Ü–µ–π –∫–ª–∞—Å –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ –º–µ—Ç–æ–¥ getSignature, —è–∫–∏–π –ø–æ–≤–µ—Ä—Ç–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ signature.

// –õ—é–¥–∏–Ω–∞ (Person): –°—Ç–≤–æ—Ä—ñ—Ç—å –∫–ª–∞—Å Person. –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ü—å–æ–≥–æ –∫–ª–∞—Å—É –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –∫–ª–∞—Å—É Key —ñ –∑–±–µ—Ä—ñ–≥–∞—î —ó—Ö —É –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ key. –ö–ª–∞—Å Person –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ –º–µ—Ç–æ–¥ getKey, —è–∫–∏–π –ø–æ–≤–µ—Ä—Ç–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –∫–ª—é—á.

// –î—ñ–º (House): –°—Ç–≤–æ—Ä—ñ—Ç—å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–∏–π –∫–ª–∞—Å House. –¶–µ–π –∫–ª–∞—Å –º–∞—î –¥–≤—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ: door, —è–∫–∞ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥–∫—Ä–∏—Ç–∞ (true), –∞–±–æ –∑–∞–∫—Ä–∏—Ç–∞ (false), —ñ key, —è–∫–∞ –∑–±–µ—Ä—ñ–≥–∞—î –æ–±'—î–∫—Ç –∫–ª–∞—Å—É Key. –£ —Ü—å–æ–º—É –∫–ª–∞—Å—ñ —Ç–∞–∫–æ–∂ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –º–µ—Ç–æ–¥ comeIn, —è–∫–∏–π –¥–æ–¥–∞—î –æ–±'—î–∫—Ç –∫–ª–∞—Å—É Person —É –º–∞—Å–∏–≤ tenants, —è–∫—â–æ door –≤—ñ–¥–∫—Ä–∏—Ç–∞. –í–∞—à –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–∏–π –∫–ª–∞—Å House —Ç–∞–∫–æ–∂ –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–∏–π –º–µ—Ç–æ–¥ OpenDoor, —è–∫–∏–π –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –∫–ª–∞—Å—É Key.

// –ú—ñ–π –±—É–¥–∏–Ω–æ–∫ (MyHouse): –°—Ç–≤–æ—Ä—ñ—Ç—å –∫–ª–∞—Å MyHouse, —è–∫–∏–π —É—Å–ø–∞–¥–∫–æ–≤—É—î—Ç—å—Å—è –≤—ñ–¥ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—É House. –†–µ–∞–ª—ñ–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ openDoor —É —Ü—å–æ–º—É –∫–ª–∞—Å—ñ. –Ø–∫—â–æ –∫–ª—é—á, –ø–µ—Ä–µ–¥–∞–Ω–∏–π —Ü—å–æ–º—É –º–µ—Ç–æ–¥—É, –∑–±—ñ–≥–∞—î—Ç—å—Å—è –∑ –∫–ª—é—á–µ–º, –∑–±–µ—Ä–µ–∂–µ–Ω–∏–º —è–∫ key, —Ç–æ –¥–≤–µ—Ä—ñ –≤—ñ–¥—á–∏–Ω—è—é—Ç—å—Å—è.

// –ü—ñ—Å–ª—è —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó –≤—Å—ñ—Ö –∫–ª–∞—Å—ñ–≤ —Å—Ç–≤–æ—Ä—ñ—Ç—å –æ–±'—î–∫—Ç–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–ª–∞—Å—É —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ —Å—Ü–µ–Ω–∞—Ä—ñ–π, –≤ —è–∫–æ–º—É –ª—é–¥–∏–Ω–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –¥–æ–¥–æ–º—É.

// –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –æ—Å—å —Ç–∞–∫:

// ```ts

class Key {
    private signature: number = Math.random();

    getSignature(): number {
        return this.signature;
    }
}

class Person {
    constructor(private key: Key) { };


    getKey(): Key["signature"] {
        return this.key.getSignature();
    };
}

abstract class House {

    door: boolean;
    tenants: Person[];
    key: Key["signature"];

    constructor(doorIsOpen: boolean, tenants: Person[], key: Key) {
        this.door = doorIsOpen;
        this.tenants = tenants;
        this.key = key.getSignature();
    }

    comeIn(tenant: Person): void {
        if (this.door) {
            this.tenants.push(tenant)
            console.log("Welcome !"); 
        } else {
            console.log("You shall not pass!üßô");
        }
    };

    abstract openDoor(key: Key["signature"]);
}

class MyHouse extends House {

    constructor(key: Key) {
        super(false, [], key)
    }

    openDoor(key: Key["signature"]) {
        if (this.door === false) {
         if (key === this.key ) {
            this.door = true;
            console.log("door opened");
          } else {console.log("You have wrong key");}
        } else {
            console.log("door is already opened");
            
        }
    }


}


const key = new Key();
const house = new MyHouse(key);
const person = new Person(key);

house.openDoor(person.getKey());
house.comeIn(person);
house.openDoor(person.getKey());



export { };
